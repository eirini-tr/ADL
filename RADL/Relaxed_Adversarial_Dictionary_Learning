clc;
clear all;
close all;

rng(0)

times = 4;      % runs of the algorithm

% INITIALIZATIONS
accuracy_svm_gauss_raw = zeros(1,times);
accuracy_svm_gauss_rec = zeros(1,times);

ct = 2500;       % define a large number randomly in order to do the following initializations
same_pattern_clean = 2*ones(times,ct);
same_pattern_noisy = 2*ones(times,ct);


for q=1:times
    
    load('....');                % load the matrix with your data
        
    clear D1;
    clear D2;                    % D2 is the auxiliary dictionary
    
    
    trans_psm_avalanche = psm_avalanche';   % use the name of the dataset that you loaded instead of the psm_avalanche
    [r,c] = size(trans_psm_avalanche);
    
    % CREATE NOISY SET
    set_noisy = trans_psm_avalanche;
    for i=1:r
        set_noisy(i,:) = circshift(trans_psm_avalanche(i,:), [1 randi(c)-1]);
    end
    
    % SCALING
    scale = 3;      % define scale for the time window W
    trans_psm_avalanche = data_scaling(trans_psm_avalanche,scale,r,c);
    set_noisy = data_scaling(set_noisy,scale,r,c);
    [~,c] = size(set_noisy);
    
    % TAKE RANDOMLY THE COLUMNS
    ran = randperm(c);
  
    
    % TRAIN SET & NOISY TRAIN SET
    
    num_train = floor(0.5*c);
    train_set_clean = trans_psm_avalanche(:,ran(1:num_train));
    train_set_noisy = set_noisy(:,ran(1:num_train));
    
    [train_set_clean,train_set_noisy] = unwanted_columns_removal(train_set_clean,train_set_noisy,num_train);
    [~,ctr] = size(train_set_clean);
    
    
    % TEST SET & NOISY TEST SET
    
    num_test = floor(0.5*c);
    test_set_clean = trans_psm_avalanche(:,ran(num_train+1:num_train+num_test));
    test_set_noisy = set_noisy(:,ran(num_train+1:num_train+num_test));
    
    [test_set_clean,test_set_noisy] = unwanted_columns_removal(test_set_clean,test_set_noisy,num_test);
    [~,ct] = size(test_set_clean);
    
    
    % FIRST ELEMENT OF D1
    
    D1 = train_set_clean(:,randi(ctr));
    
        
    T0 = 2;    % Define sparsity level
       
    
    % CREATE THE DICTIONARY
    
    fprintf('Start constructing the dictionary for run %.4g\n', q);

    for i=2:ctr-1
        
        fprintf('Checking training sample %.4g\n',i);

        
        validation_set_clean = [train_set_clean(:,1:i-1) train_set_clean(:,i+1:end)];
        validation_set_noisy = [train_set_noisy(:,1:i-1) train_set_noisy(:,i+1:end)];
        [~, cvn] = size(validation_set_noisy);
        
        validation_set = [validation_set_clean validation_set_noisy];
        [~,cv] = size(validation_set);
        
        D2 = [D1 train_set_clean(:,i)];
        
        
        error1 = zeros(1,cvn);
        error2 = zeros(1,cvn);
        
        error3 = zeros(1,cvn);
        error4 = zeros(1,cvn);
        
        
        for w1=1:cvn    % Clean Validation Set
            
            [X1] = OMP_non_normalized_atoms(D1,validation_set_clean(:,w1),T0);
            [X2] = OMP_non_normalized_atoms(D2,validation_set_clean(:,w1),T0);
            %[reconstructed1, reconstructed2] = reconstructed_signals_training_RADL(D1,D2,X1,X2,r,scale);
            
            reconstructed1 = D1*X1;
            reconstructed2 = D2*X2;
            
            error1(w1) = sqrt(immse(validation_set_clean(:,w1),reconstructed1));
            error2(w1) = sqrt(immse(validation_set_clean(:,w1),reconstructed2));
            
            
            
        end
        
        for w2=1:cvn   % Noisy Validation Set
    
            
            [X3] = OMP_non_normalized_atoms(D1,validation_set_noisy(:,w2),T0);
            [X4] = OMP_non_normalized_atoms(D2,validation_set_noisy(:,w2),T0);
            %[reconstructed3, reconstructed4] = reconstructed_signals_training_RADL(D1,D2,X3,X4,r,scale);
            
            
            reconstructed3 = D1*X3;
            reconstructed4 = D2*X4;
            
            
            error3(w2) = sqrt(immse(validation_set_noisy(:,w2),reconstructed3));
            error4(w2) = sqrt(immse(validation_set_noisy(:,w2),reconstructed4));
            
    
            
        end
        
        if (  (sum(error1)/(sum(error3)+eps)) <= (sum(error2)/(sum(error4)+eps)) )
            D2 = D1;
        elseif (  (sum(error1)/(sum(error3)+eps)) > (sum(error2)/(sum(error4)+eps))) 
            D1 = [D1 train_set_clean(:,i)];
        end
        
    end
    
    
    %%%%%%%% CHECK ON THE CLEAN TEST SET WITH THE DICTIONARY
    
    
    [X] = OMP_non_normalized_atoms(D1,test_set_clean,T0);                          % Coefficient Matrix for Clean Test Set
    [reconstructed_clean_test] = reconstructed_signals_testing_RADL(D1,X,r,ct,scale);
    
    errorclean = sqrt(immse(test_set_clean,reconstructed_clean_test));
    
    
    
    %%%%%%% CHECK ON THE NOISY TEST SET WITH THE DICTIONARY
    
    [X_noisy] = OMP_non_normalized_atoms(D1,test_set_noisy,T0);                    % Coefficient Matrix for Noisy Test Set
    [reconstructed_noisy_test] = reconstructed_signals_testing_RADL(D1,X_noisy,r,ct,scale);
    
    errornoisy = sqrt(immse(test_set_noisy,reconstructed_noisy_test));
  
    
    % CLASSIFICATION PERFORMANCE
    
    [accuracy_svm_gauss_raw(q)] = clean_noisy_examples_classification(test_set_clean,test_set_noisy); %classification using raw data
    [accuracy_svm_gauss_rec(q)] = clean_noisy_examples_classification(reconstructed_clean_test,reconstructed_noisy_test); %classification using reconstructed data
    
    
    %%%% SAME PATTERNS IN CLEAN AND NOISY TEST SETS WITH CLEAN & NOISY RECONSTRUCTED TEST SETS
    
    for i=1:ct
        if (nnz(reconstructed_clean_test(:,i) - test_set_clean(:,i))==0)
            same_pattern_clean(q,i) = 1;
        else
            same_pattern_clean(q,i) = 0;
        end
        
    end
    
    for i=1:ct
        if (nnz(reconstructed_noisy_test(:,i) - test_set_noisy(:,i))==0)
            same_pattern_noisy(q,i) = 1;
        else
            same_pattern_noisy(q,i) = 0;
        end
        
    end
    
    same_pattern_clean = same_pattern_clean(:,1:ct);
    same_pattern_noisy = same_pattern_noisy(:,1:ct);
   
    
end

% FULL RETRIVAL RESULTS

n1 = zeros(1,times);
n2 = zeros(1,times);
for i=1:times
    n1(i) = nnz(same_pattern_clean(i,:));
    n2(i) = nnz(same_pattern_noisy(i,:));
end

n11 = mean(n1);
n22 = mean(n2);

stdn1 = std(n1);
stdn2 = std(n2);


% CLASSIFICATION PERFORMANCE RESULTS

meang_raw = mean(accuracy_svm_gauss_raw);
meang_rec = mean(accuracy_svm_gauss_rec);

stdg_raw = std(accuracy_svm_gauss_raw);
stdg_rec = std(accuracy_svm_gauss_rec);


%%%%% FINDING SAME PATTERNS IN TRAIN SET AND DICTIONARY
[~,cd] = size(D1);
same_pattern_dictionary = zeros(1,cd);

for i=1:cd
    for j=1:ctr
        if (nnz(D1(:,i) - train_set_clean(:,j))==0)
            same_pattern_dictionary(i) = same_pattern_dictionary(i) + 1;
        end
    end
end

plot_dictionary_distribution(D1);
