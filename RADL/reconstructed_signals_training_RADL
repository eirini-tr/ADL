function [reconstructed1, reconstructed2] = reconstructed_signals_training_RADL(D1,D2,X1,X2,r,scale)
% Converts the real values of the reconstructed signal to 0 and 1


reconstructed1 = zeros(r,1);
reconstructed2 = zeros(r,1);


prod1 = D1*X1;
prod2 = D2*X2;


for i=1:r
    if scale==2
        if prod1(i)>= -1/(2*scale) & prod1(i)< 1/(2*scale)
            reconstructed1(i) = 0;
        elseif prod1(i)>= 1/(2*scale) & prod1(i)<= 3/(2*scale)
            reconstructed1(i) = 1/scale;
        else
            reconstructed1(i) = 1;
        end
    elseif scale==3
        if prod1(i)>= -1/(3*scale) & prod1(i)< 1/(3*scale)
            reconstructed1(i) = 0;
        elseif prod1(i)>= 1/(3*scale) & prod1(i)< ( (1/(3*scale))+1/scale )
            reconstructed1(i) = 1/scale;
        elseif prod1(i)>= ( (1/(3*scale))+1/scale ) & prod1(i)<= 2*( (1/(3*scale))+1/scale )
            reconstructed1(i) = 2/scale;
        else
            reconstructed1(i) = 1;
        end
    end
end
        
   

for i=1:r
    if scale==2
        if prod2(i)< 1/(2*scale)
            reconstructed2(i) = 0;
        elseif prod2(i)>= 1/(2*scale) & prod2(i)<= 3/(2*scale)
            reconstructed2(i) = 1/scale;
        else
            reconstructed2(i) = 1;
        end
    elseif scale==3
        if prod2(i)< 1/(3*scale)
            reconstructed2(i) = 0;
        elseif prod2(i)>= 1/(3*scale) & prod2(i)< ( (1/(3*scale))+1/scale )
            reconstructed2(i) = 1/scale;
        elseif prod2(i)>= ( (1/(3*scale))+1/scale ) & prod2(i)<= 2*( (1/(3*scale))+1/scale )
            reconstructed2(i) = 2/scale;
        else
            reconstructed2(i) = 1;
        end
    end
end
        


end
